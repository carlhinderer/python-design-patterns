-----------------------------------------------------------
CHAPTER 2 - THE BUILDER PATTERN
-----------------------------------------------------------

- The 'factory method' and 'abstract factory' patterns provide ways to improve object 
    creation.  The builder pattern separates the construction of a complex object from its 
    representation.  It is used when an object must be created in multiple steps, and different
    representations of the same construction are required.



- The difference between the factory and builder patterns is that the factory pattern creates an object
    in a simple step, while a builder pattern creates an object in multiple steps through the use of a
    director.  Also, the factory pattern immediately returns a new object, while in the builder pattern
    the client code explicitly asks the director to return the final object when it needs it.



- It is also often used in statically typed language to support constructors with different parameters,
    but we can solve that problem easily in Python with named parameters or argument list unpacking.



- For example, suppose that we want to create an HTML page generator. The basic structure 
    (construction part) of an HTML page is always the same: it begins with <html> and finishes 
    with </html>, inside the HTML section are the <head> and </head> elements, inside the head 
    section are the <title> and </title> elements, and so forth.  But the representation of the 
    page can differ.

  The HTML page generation problem can be solved using the builder pattern. In this pattern, there 
    are two main participants:

    1. The builder  = The component responsible for creating the various parts of a complex object. In 
                        this example, these parts are the title, heading, body, and the footer of the page.

    2. The director = The component that controls the building process using a builder instance. It calls 
                        the builder's functions for setting the title, the heading, and so on. And, using 
                        a different builder instance allows us to create a different HTML page without
                        touching any of the code of the director.



- Builder Pattern Example

    - In this example, we'll use the builder pattern to make a pizza-ordering application.  A pizza is
        prepared in steps that should follow a specific order.  Here are the enums and constants we need.

        from enum import Enum
        import time

        PizzaProgress = Enum('PizzaProgress', 'queued preparation baking ready')
        PizzaDough = Enum('PizzaDough', 'thin thick')
        PizzaSauce = Enum('PizzaSauce', 'tomato creme_fraiche')
        PizzaTopping = Enum('PizzaTopping', 
                            'mozzarella double_mozzarella baon ham mushrooms red_onion oregano')

        STEP_DELAY = 3


    - Here is our Pizza class:

        class Pizza:
            def __init__(self, name):
                self.name = name
                self.dough = None
                self.sauce = None
                self.topping = []

            def __str__(self):
                return self.name

            def prepare_dough(self, dough):
                self.dough = dough
                print(f'preparing the {self.dough.name} dough of your {self}...')
                time.sleep(STEP_DELAY)
                print(f'done with the {self.dough.name} dough')


    - Now, we create our 2 builders, the 'MargartiaBuilder' and the 'CreamyBaconBuilder'.

        class MargaritaBuilder:
            def __init__(self):
                self.pizza = Pizza('margarita')
                self.progress = PizzaProgress.queued
                self.baking_time = 5 # in seconds for the sake of the example
        
            def prepare_dough(self):
                self.progress = PizzaProgress.preparation
                self.pizza.prepare_dough(PizzaDough.thin)
        
            def add_sauce(self):
                print('adding the tomato sauce to your margarita...')
                self.pizza.sauce = PizzaSauce.tomato
                time.sleep(STEP_DELAY)
                print('done with the tomato sauce')
        
            def add_topping(self):
                topping_desc = 'double mozzarella, oregano'
                topping_items = (PizzaTopping.double_mozzarella, PizzaTopping.oregano)
                print(f'adding the topping ({topping_desc}) to your margarita')
                self.pizza.topping.append([t for t in topping_items])
                time.sleep(STEP_DELAY)
                print(f'done with the topping ({topping_desc})')
        
            def bake(self):
                self.progress = PizzaProgress.baking
                print(f'baking your margarita for {self.baking_time} seconds')
                time.sleep(self.baking_time)
                self.progress = PizzaProgress.ready
                print('your margarita is ready')        


        class CreamyBaconBuilder:
            def __init__(self):
                self.pizza = Pizza('creamy bacon')
                self.progress = PizzaProgress.queued
                self.baking_time = 7 # in seconds for the sake of the example
        
            def prepare_dough(self):
                self.progress = PizzaProgress.preparation
                self.pizza.prepare_dough(PizzaDough.thick)
        
            def add_sauce(self):
                print('adding the crème fraîche sauce to your creamy bacon')
                self.pizza.sauce = PizzaSauce.creme_fraiche
                time.sleep(STEP_DELAY)
                print('done with the crème fraîche sauce')
        
            def add_topping(self):
                topping_desc = 'mozzarella, bacon, ham, mushrooms, red onion, oregano'
                topping_items =  (PizzaTopping.mozzarella,
                                  PizzaTopping.bacon,
                                  PizzaTopping.ham,
                                  PizzaTopping.mushrooms,
                                  PizzaTopping.red_onion, 
                                  PizzaTopping.oregano)
                print(f'adding the topping ({topping_desc}) to your creamy bacon')
                self.pizza.topping.append([t for t in topping_items])
                time.sleep(STEP_DELAY)
                print(f'done with the topping ({topping_desc})')
        
            def bake(self):
                self.progress = PizzaProgress.baking
                print(f'baking your creamy bacon for {self.baking_time}
                seconds')
                time.sleep(self.baking_time)
                self.progress = PizzaProgress.ready
                print('your creamy bacon is ready')


    - The director in this example is the 'Waiter'.  The Waiter's 'construct_pizza()' method takes
        the builder as a parameter and executes all the pizza preparation steps in the right order.
        Choosing the appropriate builder can be done at runtime.

        class Waiter:
            def __init__(self):
                self.builder = None

            def construct_pizza(self, builder):
                self.builder = builder
                steps = (builder.prepare_dough,
                         builder.add_sauce,
                         builder.add_topping,
                         builder.bake)
                [step() for step in steps]

            @property
            def pizza(self):
                return self.builder.pizza


    - Now, we create the main exectution, including a method to validate that the pizza choice is valid.

         def validate_style(builders):
             try:
                 input_msg = 'What pizza would you like, [m]argarita or [c]reamy bacon?'
                 pizza_style = input(input_msg)
                 builder = builders[pizza_style]()
                 valid_input = True
             except KeyError:
                 error_msg = 'Sorry, only margarita (key m) and creamy bacon (key c) are available'
                 print(error_msg)
                 return (False, None)
             return (True, builder)


         def main():
             builders = dict(m=MargaritaBuilder, c=CreamyBaconBuilder)
             valid_input = False
             while not valid_input:
                 valid_input, builder = validate_style(builders)
             print()

             waiter = Waiter()
             waiter.construct_pizza(builder)

             pizza = waiter.pizza
             print()
             print(f'Enjoy your {pizza}!')