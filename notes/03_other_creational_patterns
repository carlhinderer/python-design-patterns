-----------------------------------------------------------
CHAPTER 3 - OTHER CREATIONAL PATTERNS
-----------------------------------------------------------

- The 'prototype pattern' is useful when one needs to create objects based on an existing object by
    using a cloning technique.

  The 'singleton pattern' offers a way to implement a class from which you can only create one object.
    There have always been discussions about whether this pattern should be used, and some people 
    consider it an anti-pattern.



- The Prototype Pattern

    - Sometimes, we want an exact copy of an object.  This can allow us to have independent copies of
        data that we can mutate without worrying about affecting each other's state.



- Prototype Pattern Example

    - In this example, we have a 'Website' class that holds useful information about a website.

        import copy

        class Website:
            def __init__(self, name, domain, description, author, **kwargs):
                self.name = name
                self.domain = domain
                self.description = description
                self.author = author
                for key in kwargs:
                    setattr(self, key, kwargs[key])

            def __str__(self):
                summary = [f'Website "{self.name}"\n',] 
                infos = vars(self).items()
                ordered_infos = sorted(infos)
                for attr, val in ordered_infos:
                    if attr == 'name':
                        continue
                    summary.append(f'{attr}: {val}\n')
                return ''.join(summary)


    - Next, we add the 'Protoype' class which implements the prototype pattern.  It is in change of 
        cloning an object using the 'copy.deepcopy()' function.

        class Prototype: 
            def __init__(self): 
                self.objects = dict() 
 
            def register(self, identifier, obj): 
                self.objects[identifier] = obj 
 
            def unregister(self, identifier): 
                del self.objects[identifier] 
 
            def clone(self, identifier, **attrs): 
                found = self.objects.get(identifier) 
                if not found: 
                    raise ValueError(f'Incorrect object identifier: {identifier}') 
                obj = copy.deepcopy(found) 
                for key in attrs:
                    setattr(obj, key, attrs[key])
                return obj


    - Finally, in the 'main()' method, we create a Website instance and clone it.

        def main(): 
            keywords = ('python', 'data', 'apis', 'automation')
            site1 = Website('ContentGardening', 
                    domain='contentgardening.com', 
                    description='Automation and data-driven apps', 
                    author='Kamon Ayeva',
                    category='Blog',
                    keywords=keywords)
         
            prototype = Prototype() 
            identifier = 'ka-cg-1' 
            prototype.register(identifier, site1)
            
            site2 = prototype.clone(identifier, 
                    name='ContentGardeningPlayground',
                    domain='play.contentgardening.com', 
                    description='Experimentation for techniques featured on the blog', 
                    category='Membership site',
                    creation_date='2018-08-01')